/*
 * flappyball.h
 *
 *  Created on: 2020/7/26
 *      Author: https://github.com/ArduboyCollection/FlappyBall
 */

#ifndef FLAPPYBALL_H
#define FLAPPYBALL_H

#include "stm32f10x.h"

#define HEIGHT 64   //------------------------------------------------不知道是不是指屏幕的高度
#define WIDTH  128
#define WHITE  1
#define BLACK  0
#define FLAPPY_FONTSIZE 8
#define FLAPPY_FONTSIZE_MODE 1

// Things that make the game work the way it does
#define FRAMES_PER_SECOND 30   // The update and refresh speed
#define FRAC_BITS 6            // The number of bits in the fraction part of a fixed point int

// The following values define how fast the ball will accelerate and how high it will jump.
// They are given as fixed point integers so the true value is multiplied by (1 << FRAC_BITS)
// to give the value used. The resulting values must be integers.
#define BALL_ACCELERATION 16      // (0.25) the ball acceleration in pixels per frame squared
#define BALL_JUMP_VELOCITY (-144) // (-2.25) The inital velocity of a ball jump in pixels per frame
// ---------------------------

// This value is an offset to make it easier to work with negative numbers.
// It must be greater than the maximum number of pixels that Floaty will jump above
// the start height (based on the acceleration and initial velocity values),
// but must be low enough not to cause an overflow when added to the maximum
// screen height as an integer.
#define NEG_OFFSET 64

// Pipe
#define PIPE_ARRAY_SIZE 4  // At current settings only 3 sets of pipes can be onscreen at once
#define PIPE_MOVE_DISTANCE 2   // How far each pipe moves per frame
#define PIPE_GAP_MAX 30        // Maximum pipe gap
#define PIPE_GAP_MIN 18        // Minimum pipe gap
#define PIPE_GAP_REDUCE 5      // Number of points scored to reduce gap size
#define PIPE_WIDTH 12
#define PIPE_CAP_WIDTH 2
#define PIPE_CAP_HEIGHT 3      // Caps push back into the pipe, it's not added length
#define PIPE_MIN_HEIGHT 6      // Higher values center the gaps more
#define PIPE_GEN_FRAMES 32     // How many frames until a new pipe is generated

// Ball
#define BALL_RADIUS 4
#define BALL_Y_START ((HEIGHT / 2) - 1) // The height Floaty begins at
#define BALL_X 32              // Floaty's X Axis

/* Sounds
const uint16_t intro[]= {
  NOTE_C5,500, NOTE_C4,500, NOTE_E4,500, NOTE_A4,500, NOTE_G4,500, NOTE_C4,500,
  NOTE_C5,500, NOTE_C4,500, NOTE_E4,500, NOTE_A4,500, NOTE_G4,500, NOTE_C4,500,
  NOTE_A4,500, NOTE_A3,500, NOTE_C4,500, NOTE_F4,500, NOTE_D4,500, NOTE_A3,500,
  NOTE_A4,500, NOTE_A3,500, NOTE_C4,500, NOTE_G4,500, NOTE_D4,500, NOTE_F4,500,
  NOTE_C5, 2000, TONES_END
};

const uint16_t bing[] = {
  NOTE_FS1,107, NOTE_C4,500, TONES_END
};

const uint16_t point[] = {
  NOTE_B5,75, NOTE_E6,225, TONES_END
};

const uint16_t horns[] = {
  NOTE_C4,300, NOTE_D3,150, NOTE_REST,150, NOTE_C3,150, NOTE_G3,750, NOTE_D4,900,
  NOTE_B3,37, NOTE_G3,37, NOTE_E3,37, NOTE_C3,37, NOTE_A2,37, NOTE_F2,37,
  NOTE_D2,37, NOTE_B1,500, TONES_END
};

const uint16_t hit[] = {
  NOTE_C4,31, NOTE_CS4,31, NOTE_D4,31, TONES_END
};
*/

typedef uint8_t BOOLEAN;
#define TRUE  1
#define FALSE 0

void Flappyball_Init(void);
void Flappyball_Play(void);
void drawInfo(void);
void drawFloor(void);
void drawFloaty(void);
void drawPipes(void);
void generatePipe(void);
BOOLEAN checkPipe(int8_t x);
BOOLEAN jumpPressed(void);
void beginJump(void);
void startFalling(void);
void moveFloaty(void);
void debounceButtons(void);
int8_t getOffset(unsigned int s);

uint8_t Check_ButtonsState(void);
uint32_t random_num(uint32_t num_start,uint32_t num_stop);

#endif/* FLAYPPYBALL_H_ */
